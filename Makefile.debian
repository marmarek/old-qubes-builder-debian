# Makefile for debian based package build
# 
# Davíð Steinn Geirsson <david@dsg.is>
#
# For "API" documentation check Makefile.generic
#
# Variables used as "parameters":
#  DIST
#  SRC_DIR
#  COMPONENT
#  PACKAGE_SET (currently "dom0" or "vm")

### Load component-specific settings

# Component specific settings. Generic variables:
#  SOURCE_PREP - make target to run at "prep" stage
#  SOURCE_COPY_IN - make target to run after "copy-in" stage
#  SOURCE_COPY_OUT - make target to run after "copy-out" stage
# Above are mainly to extend Makefile with some component-specific actions
# (like handling additional sources)
#
#
# Check Makefile.DISTRIBUTION for distribution-specific supported variables

### Load distro-specific settings

# This file should define:
# 1. variables:
#   PACKAGE_LIST - list of packages to build. Targets 'build-dep', 'package' and 'copy-out'
#     will be run for each word on the list, with PACKAGE set to current word
#   DIST_BUILD_DIR - basedir for sources inside of chroot - relative to
#     CHROOT_DIR (qubes-src will be created in this directory)
# targets:
#   dist-prepare-chroot - initial preparation of chroot environment
#   dist-prep - some preparation of sources (if needed)
#   dist-build-dep - install build dependencies (should operate on chroot directory)
#   dist-package - compile package (should operate on chroot directory)
#   dist-copy-out - copy compiled package out of chroot env; this target should
#     move packages to ORIG_SRC (distro-specific subdir) and hardlink them to
#     BUILDER_REPO_DIR
#
#   dist-build-dep, dist-package and dist-copy-out targets are run in separate
#   process with stdout+stderr redirected to log file. If you want to print
#   some message, use 3-rd file descriptor
#
# This file can specify additional targets (like update-repo-*)

### Variables required Makefile.generic
PACKAGE_LIST = $(DEBIAN_BUILD_DIRS)
DIST_BUILD_DIR = /home/user
DEBIAN_DIR = $(DIST_SRC)/$(DEBIAN_BUILD_DIRS)
DEBIAN_CHROOT_DIR = $(CHROOT_DIR)/$(DIST_SRC)/$(DEBIAN_BUILD_DIRS)

### Global variables
DEBIANVERSION=$(DIST)
export DEBIANVERSION

### Local variables
RUN_AS_USER = user
REPO_CHROOT_DIR ?= chroot-$(DISTRIBUTION)

DEBIAN_DEPENDENCIES := dpkg-dev debootstrap
DEBIAN_PARSER=$(DEBIAN_PLUGIN_DIR)/scripts/debian-parser
export DEBIAN_PARSER

ifneq (,$(DEBIAN_BUILD_DIRS))
  release_name = $(shell $(DEBIAN_PARSER) changelog --package-release-name $(ORIG_SRC)/$(DEBIAN_BUILD_DIRS)/changelog)
endif

ifndef OUTPUT_DIR
OUTPUT_DIR = deb/$(DIST)
endif

listfiles = awk 'section == "Files:" { print $$5 } /^[A-Z].*.$$/ { section=$$1 }'

ifdef UPDATE_REPO
  ifneq (,$(findstring current-testing,$(UPDATE_REPO)))
    REPO_SUFFIX = -testing
  else ifneq (,$(findstring unstable,$(UPDATE_REPO)))
    REPO_SUFFIX = -unstable
  endif
endif

DISTRIBUTION_CAP=$(shell echo $(DISTRIBUTION) | sed -e 's/^./\U&/';)
define aptdistributions
Origin: Qubes $(DISTRIBUTION_CAP)
Label: Qubes $(DISTRIBUTION_CAP)
Codename: $(DIST)
Architectures: amd64 source
Components: main
Description: Apt repository with qubes domU support tools for $(DISTRIBUTION_CAP) $(DIST)
endef
export aptdistributions

ifdef REPO_PROXY
  APT_GET_OPTIONS += -o Acquire::http::Proxy=$(REPO_PROXY)
endif

dist-prepare-chroot: $(CHROOT_DIR)/home/user/.prepared_base
	@if [ $(VERBOSE) -gt 0 ]; then \
		echo "-> dist-prepare-chroot for $(DIST)"; \
		echo "-> sudo mount --bind $(BUILDER_REPO_DIR) $(CHROOT_DIR)/tmp/qubes-deb;"; \
	fi
	@if [ ! -r $(CHROOT_DIR)/proc/cpuinfo ]; then\
		sudo mount -t proc proc $(CHROOT_DIR)/proc;\
	fi
	@if ! [ -d $(CHROOT_DIR)/tmp/qubes-deb/deb ]; then\
		mkdir -p $(CHROOT_DIR)/tmp/qubes-deb;\
		sudo mount --bind $(BUILDER_REPO_DIR) $(CHROOT_DIR)/tmp/qubes-deb;\
	fi

$(CHROOT_DIR)/home/user/.prepared_base: $(DEBIAN_PLUGIN_DIR)/prepare-chroot-$(DISTRIBUTION)
	# Make sure repo directory exists
	@if ! [ -d "$(BUILDER_REPO_DIR)/dists" ]; then\
	    mkdir -p "$(BUILDER_REPO_DIR)/dists";\
	fi
	@echo "-> Preparing $(DIST) build environment"
	@sudo -E $(DEBIAN_PLUGIN_DIR)/prepare-chroot-$(DISTRIBUTION) $(CHROOT_DIR) $(DIST)
	@touch $(CHROOT_DIR)/home/user/.prepared_base

dist-prep:
	@if ! which rpm >/dev/null 2>&1; then \
		echo "WARNING: rpm executable not found (are you on cygwin?)"; \
	elif [ $(VERBOSE) -gt 0 ]; then \
		echo "currently installed dependencies:"; \
		rpm -q $(DEBIAN_DEPENDENCIES) || exit 1; \
	else \
		rpm -q $(DEBIAN_DEPENDENCIES) >/dev/null 2>&1 || exit 1; \
	fi

dist-build-dep: 
	@if ! [ -d "$(BUILDER_REPO_DIR)/dists" ]; then\
	    mkdir -p "$(BUILDER_REPO_DIR)/dists";\
	fi
	$(DEBIAN_PLUGIN_DIR)/update-local-repo.sh $(DIST)
	sudo chroot $(CHROOT_DIR) apt-get ${APT_GET_OPTIONS} update

	# Parse debian/control for Build-Depends and install
	$(DEBIAN_PARSER) control --build-depends $(DEBIAN_CHROOT_DIR)/control |\
		xargs sudo chroot $(CHROOT_DIR) apt-get $(APT_GET_OPTIONS) install -y

	# Parse debian/control for custom X-Qubes-Build-Depends-[debian] depends and install
	$(DEBIAN_PARSER) control --qubes-build-depends $(DISTRIBUTION) $(DEBIAN_CHROOT_DIR)/control |\
		xargs sudo chroot $(CHROOT_DIR) apt-get $(APT_GET_OPTIONS) install -y

	# Parse debian/control for custom X-Qubes-Build-Depends-[wheezy/jessie] depends and install
	$(DEBIAN_PARSER) control --qubes-build-depends $(DIST) $(DEBIAN_CHROOT_DIR)/control |\
		xargs sudo chroot $(CHROOT_DIR) apt-get $(APT_GET_OPTIONS) install -y

dist-package:
ifndef PACKAGE
	$(error "PACKAGE need to be set!")
endif
ifdef INCREMENT_DEVEL_VERSIONS
	# Update changelog with -develXX appended to version
	# Note: INCREMENT_DEVEL_VERSIONS needs to be set to any value in 
	#       builder configuration to use this feature
	cd $(DEBIAN_CHROOT_DIR)/..; $(DEBIAN_PLUGIN_DIR)/scripts/debian-changelog.sh

	cp -fp $(DEBIAN_CHROOT_DIR)/changelog.dist $(ORIG_SRC)/$(DEBIAN_BUILD_DIRS)/ || true
	cp -fp $(DEBIAN_CHROOT_DIR)/changelog.$(DIST) $(ORIG_SRC)/$(DEBIAN_BUILD_DIRS)/ || true

	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) su $(RUN_AS_USER) -c 'cd $(DEBIAN_DIR)/..; export LC_ALL=C; dpkg-buildpackage -sa -k${SIGN_KEY}'
else
	# Cleanup; delete any old builds, except leave the orig that may have
	# been created on copy-in build stage
	cd $(CHROOT_DIR)/$(DIST_SRC)/..; GLOBIGNORE=$(release_name)*orig*; rm -f $(release_name)*; GLOBIGNORE=
	rm -rf $(CHROOT_DIR)/$(DIST_SRC)/deb/*
	rm -rf $(CHROOT_DIR)/$(DIST_SRC)/rpm/*
	rm -rf $(CHROOT_DIR)/$(DIST_SRC)/pkgs/*

	# Only used to update changelog to new version since changelog is 
	# also called below
	cd $(DEBIAN_CHROOT_DIR)/..; $(DEBIAN_PLUGIN_DIR)/scripts/debian-changelog.sh

	# Break the hardlink
	cp $(DEBIAN_CHROOT_DIR)/changelog $(DEBIAN_CHROOT_DIR)/changelog.copy
	mv $(DEBIAN_CHROOT_DIR)/changelog.copy $(DEBIAN_CHROOT_DIR)/changelog

	echo "Building package in $(DIST_SRC)"
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) su $(RUN_AS_USER) -c 'cd $(DEBIAN_DIR)/..; export LC_ALL=C; debchange -l+$(DIST) "Build for $(DIST)"; debchange --force-distribution -r -D $(DIST) $(DIST); dpkg-buildpackage -sa -k${SIGN_KEY}'
endif

dist-copy-out:
	mkdir -p $(BUILDER_REPO_DIR)/deb
	mkdir -p $(ORIG_SRC)/$(OUTPUT_DIR)
	cd $(DEBIAN_CHROOT_DIR)/../..; \
		cp -t $(BUILDER_REPO_DIR)/deb `$(listfiles) $(release_name)*.changes`
	cp -t $(BUILDER_REPO_DIR)/deb/ $(DEBIAN_CHROOT_DIR)/../../$(release_name)*.changes
	cd $(DEBIAN_CHROOT_DIR)/../..; \
		mv -t $(PWD)/$(ORIG_SRC)/$(OUTPUT_DIR)  `$(listfiles) $(release_name)*.changes`
	mv -t $(PWD)/$(ORIG_SRC)/$(OUTPUT_DIR) $(DEBIAN_CHROOT_DIR)/../../$(release_name)*.changes

ifeq (,$(DEBIAN_BUILD_DIRS))
update-repo:
	@true
else
update-repo: package_name = $(shell $(DEBIAN_PARSER) changelog --package-name $(ORIG_SRC)/$(DEBIAN_BUILD_DIRS)/changelog)
update-repo: package_ver = $(shell $(DEBIAN_PARSER) changelog --package-version-full $(ORIG_SRC)/$(DEBIAN_BUILD_DIRS)/changelog)
update-repo: package_ver_dist = $(shell $(DEBIAN_PARSER) changelog --package-version-full $(DEBIAN_CHROOT_DIR)/changelog.$(DIST) 2>&-)
update-repo: release_name_dist = $(shell $(DEBIAN_PARSER) changelog --package-release-name-full $(DEBIAN_CHROOT_DIR)/changelog.$(DIST) 2>&-)
update-repo: release_name_full = $(shell $(DEBIAN_PARSER) changelog --package-release-name-full $(DEBIAN_CHROOT_DIR)/changelog)
update-repo:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	@mkdir -p $(UPDATE_REPO)/conf
	@if [ ! -e $(UPDATE_REPO)/conf/distributions ]; then \
		touch $(UPDATE_REPO)/conf/distributions; \
	fi
	@grep $(DIST) $(UPDATE_REPO)/conf/distributions > /dev/null; \
	if [ $$? -ne 0 ]; then \
		echo "$$aptdistributions" >> $(UPDATE_REPO)/conf/distributions; \
	fi
	@sudo umount $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo $(REPO_CHROOT_DIR)/tmp/qubes-deb 2>/dev/null || true

	@# Softlink to the first distribution called; it will be used to create and store repo
	@if ! [ -L $(REPO_CHROOT_DIR) ]; then \
	    ln -sf chroot-${DIST} ${REPO_CHROOT_DIR}; \
	fi
	@if ! [ -d $(REPO_CHROOT_DIR)/tmp/qubes-deb/deb ]; then \
		mkdir -p $(REPO_CHROOT_DIR)/tmp/qubes-deb ;\
		sudo mount --bind $(BUILDER_REPO_DIR) $(REPO_CHROOT_DIR)/tmp/qubes-deb ;\
	fi
	@if ! [ -d $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo/dists ]; then \
		mkdir -p $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo ;\
		sudo mount --bind $(UPDATE_REPO) $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo ;\
	fi

	@if [ "X$(release_name_dist)" != "X" ]; then \
		sudo $(CHROOT_ENV) chroot $(REPO_CHROOT_DIR) su $(RUN_AS_USER) -c "reprepro -b /tmp/qubes-apt-repo -T deb include $(DEBIANVERSION)$(REPO_SUFFIX) /tmp/qubes-deb/deb/$(release_name_dist)_amd64.changes" || exit 1; \
	else \
		sudo $(CHROOT_ENV) chroot $(REPO_CHROOT_DIR) su $(RUN_AS_USER) -c "reprepro -b /tmp/qubes-apt-repo -T deb include $(DEBIANVERSION)$(REPO_SUFFIX) /tmp/qubes-deb/deb/$(release_name_full)_amd64.changes" || exit 1; \
	fi
	@sudo umount $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo
	@sudo umount $(REPO_CHROOT_DIR)/tmp/qubes-deb
ifdef SNAPSHOT_FILE
	@if [ "X$(package_ver_dist)" != "X" ]; then \
		echo 'Package (== $(package_name)), Version (== $(package_ver_dist))' > $(SNAPSHOT_FILE); \
	else \
		echo 'Package (== $(package_name)), Version (== $(package_ver)+$(DIST)1)' > $(SNAPSHOT_FILE); \
	fi
endif
endif

ifeq (,$(DEBIAN_BUILD_DIRS))
check-repo:
	@true
else
check-repo: package_name = $(shell $(DEBIAN_PARSER) changelog --package-name $(ORIG_SRC)/$(DEBIAN_BUILD_DIRS)/changelog)
check-repo: package_ver = $(shell $(DEBIAN_PARSER) changelog --package-version-full $(ORIG_SRC)/$(DEBIAN_BUILD_DIRS)/changelog)
check-repo:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
	@sudo umount $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo $(REPO_CHROOT_DIR)/tmp/qubes-deb 2>/dev/null || true

	@# Softlink to the first distribution called; it will be used to create and store repo
	@if ! [ -L $(REPO_CHROOT_DIR) ]; then \
	    ln -sf chroot-${DIST} ${REPO_CHROOT_DIR}; \
	fi
	@if ! [ -d $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo/dists ]; then \
		mkdir -p $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo ;\
		sudo mount --bind $(UPDATE_REPO) $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo ;\
	fi

	sudo $(CHROOT_ENV) chroot $(REPO_CHROOT_DIR) su $(RUN_AS_USER) -c "reprepro -b /tmp/qubes-apt-repo -T deb listfilter $(DEBIANVERSION)$(REPO_SUFFIX) 'Package (== $$package_name), Version (== $$package_ver+$(DIST)1)'" | grep -q "$$package_name"
	@sudo umount $(REPO_CHROOT_DIR)/tmp/qubes-apt-repo
endif
